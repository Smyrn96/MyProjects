Terminals unused in grammar

    SINGLE_LINE_COMMENT
    OTHERCHAR
    UMINUS


State 16 conflicts: 1 shift/reduce
State 100 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt_list

    2 stmt: expr SEMICOLON
    3     | ifstmt
    4     | whilestmt
    5     | forstmt
    6     | returnstmt

    7 $@1: %empty

    8 stmt: BREAK $@1 SEMICOLON

    9 $@2: %empty

   10 stmt: CONTINUE $@2 SEMICOLON
   11     | block
   12     | funcdef
   13     | SEMICOLON

   14 $@3: %empty

   15 stmt_list: stmt $@3 stmt_list
   16          | %empty

   17 expr: assignexpr
   18     | expr ADD expr
   19     | expr MINUS expr
   20     | expr MULTIPLICATION expr
   21     | expr DIVISION expr
   22     | expr MODULO expr
   23     | expr GREATER expr
   24     | expr GREATER_EQUAL expr
   25     | expr LESS expr
   26     | expr LESS_EQUAL expr
   27     | expr EQUAL expr
   28     | expr INEQUAL expr
   29     | expr AND expr
   30     | expr OR expr
   31     | term

   32 term: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   33     | MINUS expr
   34     | NOT expr
   35     | INCREMENT lvalue
   36     | lvalue INCREMENT
   37     | DECREMENT lvalue
   38     | lvalue DECREMENT
   39     | primary

   40 $@4: %empty

   41 $@5: %empty

   42 assignexpr: lvalue $@4 ASSIGN $@5 expr

   43 primary: lvalue
   44        | call
   45        | objectdef
   46        | LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS
   47        | const

   48 lvalue: IDENT
   49       | LOCAL IDENT
   50       | DOUBLE_COLON IDENT
   51       | member

   52 member: lvalue DOT IDENT
   53       | lvalue LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   54       | call DOT IDENT
   55       | call LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET

   56 call: call LEFT_PARENTHESIS elist RIGHT_PARENTHESIS
   57     | lvalue callsuffix
   58     | LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

   59 callsuffix: normcall
   60           | methodcall

   61 $@6: %empty

   62 normcall: LEFT_PARENTHESIS $@6 elist RIGHT_PARENTHESIS

   63 $@7: %empty

   64 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS $@7 elist RIGHT_PARENTHESIS

   65 elist: expr elist_expressions
   66      | %empty

   67 elist_expressions: COMMA expr elist_expressions
   68                  | %empty

   69 objectdef: LEFT_SQUARE_BRACKET elist RIGHT_SQUARE_BRACKET
   70          | LEFT_SQUARE_BRACKET indexed RIGHT_SQUARE_BRACKET

   71 indexed: indexedelem indexedelem_list

   72 indexedelem_list: COMMA indexedelem indexedelem_list
   73                 | %empty

   74 $@8: %empty

   75 indexedelem: LEFT_CURLY_BRACKET expr COLON $@8 expr RIGHT_CURLY_BRACKET

   76 $@9: %empty

   77 block: LEFT_CURLY_BRACKET $@9 stmt_list RIGHT_CURLY_BRACKET
   78      | LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

   79 $@10: %empty

   80 @11: %empty

   81 $@12: %empty

   82 $@13: %empty

   83 funcdef: FUNCTION $@10 IDENT @11 LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS $@13 block

   84 @14: %empty

   85 $@15: %empty

   86 $@16: %empty

   87 funcdef: FUNCTION @14 LEFT_PARENTHESIS $@15 idlist RIGHT_PARENTHESIS $@16 block

   88 const: INTEGER
   89      | REAL
   90      | STRINGCONST
   91      | NIL
   92      | TRUE
   93      | FALSE

   94 $@17: %empty

   95 idlist: IDENT $@17 idlist_list
   96       | %empty

   97 $@18: %empty

   98 idlist_list: COMMA IDENT $@18 idlist_list
   99            | %empty

  100 ifprefix: IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS

  101 elseprefix: ELSE

  102 ifstmt: ifprefix stmt
  103       | ifprefix stmt elseprefix stmt

  104 whilestart: WHILE

  105 $@19: %empty

  106 whilecond: LEFT_PARENTHESIS $@19 expr RIGHT_PARENTHESIS

  107 whilestmt: whilestart whilecond stmt

  108 N: %empty

  109 M: %empty

  110 forprefix: FOR LEFT_PARENTHESIS elist SEMICOLON M expr SEMICOLON

  111 $@20: %empty

  112 forstmt: forprefix N elist RIGHT_PARENTHESIS $@20 N stmt N

  113 $@21: %empty

  114 returnstmt: RETURN $@21 expr SEMICOLON

  115 $@22: %empty

  116 returnstmt: RETURN $@22 SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IF (258) 100
    ELSE (259) 101
    WHILE (260) 104
    FOR (261) 110
    FUNCTION (262) 83 87
    RETURN (263) 114 116
    BREAK (264) 8
    CONTINUE (265) 10
    AND (266) 29
    NOT (267) 34
    OR (268) 30
    LOCAL (269) 49
    TRUE (270) 92
    FALSE (271) 93
    NIL (272) 91
    ASSIGN (273) 42
    ADD (274) 18
    MINUS (275) 19 33
    MULTIPLICATION (276) 20
    DIVISION (277) 21
    MODULO (278) 22
    EQUAL (279) 27
    INEQUAL (280) 28
    INCREMENT (281) 35 36
    DECREMENT (282) 37 38
    GREATER (283) 23
    GREATER_EQUAL (284) 24
    LESS (285) 25
    LESS_EQUAL (286) 26
    LEFT_CURLY_BRACKET (287) 75 77 78
    RIGHT_CURLY_BRACKET (288) 75 77 78
    LEFT_SQUARE_BRACKET (289) 53 55 69 70
    RIGHT_SQUARE_BRACKET (290) 53 55 69 70
    LEFT_PARENTHESIS (291) 32 46 56 58 62 64 83 87 100 106 110
    RIGHT_PARENTHESIS (292) 32 46 56 58 62 64 83 87 100 106 112
    SEMICOLON (293) 2 8 10 13 110 114 116
    COMMA (294) 67 72 98
    COLON (295) 75
    DOUBLE_COLON (296) 50
    DOT (297) 52 54
    DOUBLE_DOT (298) 64
    SINGLE_LINE_COMMENT (299)
    OTHERCHAR (300)
    IDENT <stringValue> (301) 48 49 50 52 54 64 83 95 98
    INTEGER <intValue> (302) 88
    REAL <doubleValue> (303) 89
    STRINGCONST <stringValue> (304) 90
    UMINUS (305)


Nonterminals, with rules where they appear

    $accept (51)
        on left: 0
    program (52)
        on left: 1
        on right: 0
    stmt <stmt_node> (53)
        on left: 2 3 4 5 6 8 10 11 12 13
        on right: 15 102 103 107 112
    $@1 (54)
        on left: 7
        on right: 8
    $@2 (55)
        on left: 9
        on right: 10
    stmt_list <stmt_node> (56)
        on left: 15 16
        on right: 1 15 77
    $@3 (57)
        on left: 14
        on right: 15
    expr <node> (58)
        on left: 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
        on right: 2 18 19 20 21 22 23 24 25 26 27 28 29 30 32 33 34 42 53 55 65 67 75 100 106 110 114
    term <node> (59)
        on left: 32 33 34 35 36 37 38 39
        on right: 31
    assignexpr <node> (60)
        on left: 42
        on right: 17
    $@4 (61)
        on left: 40
        on right: 42
    $@5 (62)
        on left: 41
        on right: 42
    primary <node> (63)
        on left: 43 44 45 46 47
        on right: 39
    lvalue <node> (64)
        on left: 48 49 50 51
        on right: 35 36 37 38 42 43 52 53 57
    member <node> (65)
        on left: 52 53 54 55
        on right: 51
    call <node> (66)
        on left: 56 57 58
        on right: 44 54 55 56
    callsuffix <node> (67)
        on left: 59 60
        on right: 57
    normcall <node> (68)
        on left: 62
        on right: 59
    $@6 (69)
        on left: 61
        on right: 62
    methodcall <node> (70)
        on left: 64
        on right: 60
    $@7 (71)
        on left: 63
        on right: 64
    elist <node> (72)
        on left: 65 66
        on right: 56 58 62 64 69 110 112
    elist_expressions <node> (73)
        on left: 67 68
        on right: 65 67
    objectdef <node> (74)
        on left: 69 70
        on right: 45
    indexed <node> (75)
        on left: 71
        on right: 70
    indexedelem_list <node> (76)
        on left: 72 73
        on right: 71 72
    indexedelem <node> (77)
        on left: 75
        on right: 71 72
    $@8 (78)
        on left: 74
        on right: 75
    block (79)
        on left: 77 78
        on right: 11 83 87
    $@9 (80)
        on left: 76
        on right: 77
    funcdef <node> (81)
        on left: 83 87
        on right: 12 46 58
    $@10 (82)
        on left: 79
        on right: 83
    @11 (83)
        on left: 80
        on right: 83
    $@12 (84)
        on left: 81
        on right: 83
    $@13 (85)
        on left: 82
        on right: 83
    @14 (86)
        on left: 84
        on right: 87
    $@15 (87)
        on left: 85
        on right: 87
    $@16 (88)
        on left: 86
        on right: 87
    const <node> (89)
        on left: 88 89 90 91 92 93
        on right: 47
    idlist (90)
        on left: 95 96
        on right: 83 87
    $@17 (91)
        on left: 94
        on right: 95
    idlist_list (92)
        on left: 98 99
        on right: 95 98
    $@18 (93)
        on left: 97
        on right: 98
    ifprefix <node> (94)
        on left: 100
        on right: 102 103
    elseprefix <node> (95)
        on left: 101
        on right: 103
    ifstmt (96)
        on left: 102 103
        on right: 3
    whilestart <node> (97)
        on left: 104
        on right: 107
    whilecond <intValue> (98)
        on left: 106
        on right: 107
    $@19 (99)
        on left: 105
        on right: 106
    whilestmt (100)
        on left: 107
        on right: 4
    N <intValue> (101)
        on left: 108
        on right: 112
    M <intValue> (102)
        on left: 109
        on right: 110
    forprefix <forpref> (103)
        on left: 110
        on right: 112
    forstmt (104)
        on left: 112
        on right: 5
    $@20 (105)
        on left: 111
        on right: 112
    returnstmt (106)
        on left: 114 116
        on right: 6
    $@21 (107)
        on left: 113
        on right: 114
    $@22 (108)
        on left: 115
        on right: 116


State 0

    0 $accept: . program $end

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 16 (stmt_list)

    program     go to state 25
    stmt        go to state 26
    stmt_list   go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 1

  100 ifprefix: IF . LEFT_PARENTHESIS expr RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 46


State 2

  104 whilestart: WHILE .

    $default  reduce using rule 104 (whilestart)


State 3

  110 forprefix: FOR . LEFT_PARENTHESIS elist SEMICOLON M expr SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 47


State 4

   83 funcdef: FUNCTION . $@10 IDENT @11 LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS $@13 block
   87        | FUNCTION . @14 LEFT_PARENTHESIS $@15 idlist RIGHT_PARENTHESIS $@16 block

    LEFT_PARENTHESIS  reduce using rule 84 (@14)
    $default          reduce using rule 79 ($@10)

    $@10  go to state 48
    @14   go to state 49


State 5

  114 returnstmt: RETURN . $@21 expr SEMICOLON
  116           | RETURN . $@22 SEMICOLON

    SEMICOLON  reduce using rule 115 ($@22)
    $default   reduce using rule 113 ($@21)

    $@21  go to state 50
    $@22  go to state 51


State 6

    8 stmt: BREAK . $@1 SEMICOLON

    $default  reduce using rule 7 ($@1)

    $@1  go to state 52


State 7

   10 stmt: CONTINUE . $@2 SEMICOLON

    $default  reduce using rule 9 ($@2)

    $@2  go to state 53


State 8

   34 term: NOT . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 54
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 9

   49 lvalue: LOCAL . IDENT

    IDENT  shift, and go to state 55


State 10

   92 const: TRUE .

    $default  reduce using rule 92 (const)


State 11

   93 const: FALSE .

    $default  reduce using rule 93 (const)


State 12

   91 const: NIL .

    $default  reduce using rule 91 (const)


State 13

   33 term: MINUS . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 56
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 14

   35 term: INCREMENT . lvalue

    LOCAL             shift, and go to state 9
    LEFT_PARENTHESIS  shift, and go to state 57
    DOUBLE_COLON      shift, and go to state 20
    IDENT             shift, and go to state 21

    lvalue  go to state 58
    member  go to state 33
    call    go to state 59


State 15

   37 term: DECREMENT . lvalue

    LOCAL             shift, and go to state 9
    LEFT_PARENTHESIS  shift, and go to state 57
    DOUBLE_COLON      shift, and go to state 20
    IDENT             shift, and go to state 21

    lvalue  go to state 60
    member  go to state 33
    call    go to state 59


State 16

   77 block: LEFT_CURLY_BRACKET . $@9 stmt_list RIGHT_CURLY_BRACKET
   78      | LEFT_CURLY_BRACKET . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 61

    RIGHT_CURLY_BRACKET  [reduce using rule 76 ($@9)]
    $default             reduce using rule 76 ($@9)

    $@9  go to state 62


State 17

   69 objectdef: LEFT_SQUARE_BRACKET . elist RIGHT_SQUARE_BRACKET
   70          | LEFT_SQUARE_BRACKET . indexed RIGHT_SQUARE_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 63
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 66 (elist)

    expr         go to state 64
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    elist        go to state 65
    objectdef    go to state 35
    indexed      go to state 66
    indexedelem  go to state 67
    const        go to state 38


State 18

   32 term: LEFT_PARENTHESIS . expr RIGHT_PARENTHESIS
   46 primary: LEFT_PARENTHESIS . funcdef RIGHT_PARENTHESIS
   58 call: LEFT_PARENTHESIS . funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    FUNCTION             shift, and go to state 4
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 68
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    funcdef     go to state 69
    const       go to state 38


State 19

   13 stmt: SEMICOLON .

    $default  reduce using rule 13 (stmt)


State 20

   50 lvalue: DOUBLE_COLON . IDENT

    IDENT  shift, and go to state 70


State 21

   48 lvalue: IDENT .

    $default  reduce using rule 48 (lvalue)


State 22

   88 const: INTEGER .

    $default  reduce using rule 88 (const)


State 23

   89 const: REAL .

    $default  reduce using rule 89 (const)


State 24

   90 const: STRINGCONST .

    $default  reduce using rule 90 (const)


State 25

    0 $accept: program . $end

    $end  shift, and go to state 71


State 26

   15 stmt_list: stmt . $@3 stmt_list

    $default  reduce using rule 14 ($@3)

    $@3  go to state 72


State 27

    1 program: stmt_list .

    $default  reduce using rule 1 (program)


State 28

    2 stmt: expr . SEMICOLON
   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85
    SEMICOLON       shift, and go to state 86


State 29

   31 expr: term .

    $default  reduce using rule 31 (expr)


State 30

   17 expr: assignexpr .

    $default  reduce using rule 17 (expr)


State 31

   39 term: primary .

    $default  reduce using rule 39 (term)


State 32

   36 term: lvalue . INCREMENT
   38     | lvalue . DECREMENT
   42 assignexpr: lvalue . $@4 ASSIGN $@5 expr
   43 primary: lvalue .
   52 member: lvalue . DOT IDENT
   53       | lvalue . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   57 call: lvalue . callsuffix

    INCREMENT            shift, and go to state 87
    DECREMENT            shift, and go to state 88
    LEFT_SQUARE_BRACKET  shift, and go to state 89
    LEFT_PARENTHESIS     shift, and go to state 90
    DOT                  shift, and go to state 91
    DOUBLE_DOT           shift, and go to state 92

    ASSIGN    reduce using rule 40 ($@4)
    $default  reduce using rule 43 (primary)

    $@4         go to state 93
    callsuffix  go to state 94
    normcall    go to state 95
    methodcall  go to state 96


State 33

   51 lvalue: member .

    $default  reduce using rule 51 (lvalue)


State 34

   44 primary: call .
   54 member: call . DOT IDENT
   55       | call . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   56 call: call . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_SQUARE_BRACKET  shift, and go to state 97
    LEFT_PARENTHESIS     shift, and go to state 98
    DOT                  shift, and go to state 99

    $default  reduce using rule 44 (primary)


State 35

   45 primary: objectdef .

    $default  reduce using rule 45 (primary)


State 36

   11 stmt: block .

    $default  reduce using rule 11 (stmt)


State 37

   12 stmt: funcdef .

    $default  reduce using rule 12 (stmt)


State 38

   47 primary: const .

    $default  reduce using rule 47 (primary)


State 39

  102 ifstmt: ifprefix . stmt
  103       | ifprefix . stmt elseprefix stmt

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    stmt        go to state 100
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 40

    3 stmt: ifstmt .

    $default  reduce using rule 3 (stmt)


State 41

  107 whilestmt: whilestart . whilecond stmt

    LEFT_PARENTHESIS  shift, and go to state 101

    whilecond  go to state 102


State 42

    4 stmt: whilestmt .

    $default  reduce using rule 4 (stmt)


State 43

  112 forstmt: forprefix . N elist RIGHT_PARENTHESIS $@20 N stmt N

    $default  reduce using rule 108 (N)

    N  go to state 103


State 44

    5 stmt: forstmt .

    $default  reduce using rule 5 (stmt)


State 45

    6 stmt: returnstmt .

    $default  reduce using rule 6 (stmt)


State 46

  100 ifprefix: IF LEFT_PARENTHESIS . expr RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 104
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 47

  110 forprefix: FOR LEFT_PARENTHESIS . elist SEMICOLON M expr SEMICOLON

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 66 (elist)

    expr        go to state 64
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 105
    objectdef   go to state 35
    const       go to state 38


State 48

   83 funcdef: FUNCTION $@10 . IDENT @11 LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS $@13 block

    IDENT  shift, and go to state 106


State 49

   87 funcdef: FUNCTION @14 . LEFT_PARENTHESIS $@15 idlist RIGHT_PARENTHESIS $@16 block

    LEFT_PARENTHESIS  shift, and go to state 107


State 50

  114 returnstmt: RETURN $@21 . expr SEMICOLON

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 108
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 51

  116 returnstmt: RETURN $@22 . SEMICOLON

    SEMICOLON  shift, and go to state 109


State 52

    8 stmt: BREAK $@1 . SEMICOLON

    SEMICOLON  shift, and go to state 110


State 53

   10 stmt: CONTINUE $@2 . SEMICOLON

    SEMICOLON  shift, and go to state 111


State 54

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
   34 term: NOT expr .

    $default  reduce using rule 34 (term)


State 55

   49 lvalue: LOCAL IDENT .

    $default  reduce using rule 49 (lvalue)


State 56

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
   33 term: MINUS expr .

    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    $default  reduce using rule 33 (term)


State 57

   58 call: LEFT_PARENTHESIS . funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    FUNCTION  shift, and go to state 4

    funcdef  go to state 112


State 58

   35 term: INCREMENT lvalue .
   52 member: lvalue . DOT IDENT
   53       | lvalue . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   57 call: lvalue . callsuffix

    LEFT_SQUARE_BRACKET  shift, and go to state 89
    LEFT_PARENTHESIS     shift, and go to state 90
    DOT                  shift, and go to state 91
    DOUBLE_DOT           shift, and go to state 92

    $default  reduce using rule 35 (term)

    callsuffix  go to state 94
    normcall    go to state 95
    methodcall  go to state 96


State 59

   54 member: call . DOT IDENT
   55       | call . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   56 call: call . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_SQUARE_BRACKET  shift, and go to state 97
    LEFT_PARENTHESIS     shift, and go to state 98
    DOT                  shift, and go to state 99


State 60

   37 term: DECREMENT lvalue .
   52 member: lvalue . DOT IDENT
   53       | lvalue . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   57 call: lvalue . callsuffix

    LEFT_SQUARE_BRACKET  shift, and go to state 89
    LEFT_PARENTHESIS     shift, and go to state 90
    DOT                  shift, and go to state 91
    DOUBLE_DOT           shift, and go to state 92

    $default  reduce using rule 37 (term)

    callsuffix  go to state 94
    normcall    go to state 95
    methodcall  go to state 96


State 61

   78 block: LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .

    $default  reduce using rule 78 (block)


State 62

   77 block: LEFT_CURLY_BRACKET $@9 . stmt_list RIGHT_CURLY_BRACKET

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 16 (stmt_list)

    stmt        go to state 26
    stmt_list   go to state 113
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 63

   75 indexedelem: LEFT_CURLY_BRACKET . expr COLON $@8 expr RIGHT_CURLY_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 114
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 64

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
   65 elist: expr . elist_expressions

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85
    COMMA           shift, and go to state 115

    $default  reduce using rule 68 (elist_expressions)

    elist_expressions  go to state 116


State 65

   69 objectdef: LEFT_SQUARE_BRACKET elist . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 117


State 66

   70 objectdef: LEFT_SQUARE_BRACKET indexed . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 118


State 67

   71 indexed: indexedelem . indexedelem_list

    COMMA  shift, and go to state 119

    $default  reduce using rule 73 (indexedelem_list)

    indexedelem_list  go to state 120


State 68

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
   32 term: LEFT_PARENTHESIS expr . RIGHT_PARENTHESIS

    AND                shift, and go to state 73
    OR                 shift, and go to state 74
    ADD                shift, and go to state 75
    MINUS              shift, and go to state 76
    MULTIPLICATION     shift, and go to state 77
    DIVISION           shift, and go to state 78
    MODULO             shift, and go to state 79
    EQUAL              shift, and go to state 80
    INEQUAL            shift, and go to state 81
    GREATER            shift, and go to state 82
    GREATER_EQUAL      shift, and go to state 83
    LESS               shift, and go to state 84
    LESS_EQUAL         shift, and go to state 85
    RIGHT_PARENTHESIS  shift, and go to state 121


State 69

   46 primary: LEFT_PARENTHESIS funcdef . RIGHT_PARENTHESIS
   58 call: LEFT_PARENTHESIS funcdef . RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 122


State 70

   50 lvalue: DOUBLE_COLON IDENT .

    $default  reduce using rule 50 (lvalue)


State 71

    0 $accept: program $end .

    $default  accept


State 72

   15 stmt_list: stmt $@3 . stmt_list

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 16 (stmt_list)

    stmt        go to state 26
    stmt_list   go to state 123
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 73

   29 expr: expr AND . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 124
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 74

   30 expr: expr OR . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 125
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 75

   18 expr: expr ADD . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 126
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 76

   19 expr: expr MINUS . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 127
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 77

   20 expr: expr MULTIPLICATION . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 128
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 78

   21 expr: expr DIVISION . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 129
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 79

   22 expr: expr MODULO . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 130
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 80

   27 expr: expr EQUAL . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 131
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 81

   28 expr: expr INEQUAL . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 132
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 82

   23 expr: expr GREATER . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 133
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 83

   24 expr: expr GREATER_EQUAL . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 134
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 84

   25 expr: expr LESS . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 135
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 85

   26 expr: expr LESS_EQUAL . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 136
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 86

    2 stmt: expr SEMICOLON .

    $default  reduce using rule 2 (stmt)


State 87

   36 term: lvalue INCREMENT .

    $default  reduce using rule 36 (term)


State 88

   38 term: lvalue DECREMENT .

    $default  reduce using rule 38 (term)


State 89

   53 member: lvalue LEFT_SQUARE_BRACKET . expr RIGHT_SQUARE_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 137
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 90

   62 normcall: LEFT_PARENTHESIS . $@6 elist RIGHT_PARENTHESIS

    $default  reduce using rule 61 ($@6)

    $@6  go to state 138


State 91

   52 member: lvalue DOT . IDENT

    IDENT  shift, and go to state 139


State 92

   64 methodcall: DOUBLE_DOT . IDENT LEFT_PARENTHESIS $@7 elist RIGHT_PARENTHESIS

    IDENT  shift, and go to state 140


State 93

   42 assignexpr: lvalue $@4 . ASSIGN $@5 expr

    ASSIGN  shift, and go to state 141


State 94

   57 call: lvalue callsuffix .

    $default  reduce using rule 57 (call)


State 95

   59 callsuffix: normcall .

    $default  reduce using rule 59 (callsuffix)


State 96

   60 callsuffix: methodcall .

    $default  reduce using rule 60 (callsuffix)


State 97

   55 member: call LEFT_SQUARE_BRACKET . expr RIGHT_SQUARE_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 142
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 98

   56 call: call LEFT_PARENTHESIS . elist RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 66 (elist)

    expr        go to state 64
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 143
    objectdef   go to state 35
    const       go to state 38


State 99

   54 member: call DOT . IDENT

    IDENT  shift, and go to state 144


State 100

  102 ifstmt: ifprefix stmt .
  103       | ifprefix stmt . elseprefix stmt

    ELSE  shift, and go to state 145

    ELSE      [reduce using rule 102 (ifstmt)]
    $default  reduce using rule 102 (ifstmt)

    elseprefix  go to state 146


State 101

  106 whilecond: LEFT_PARENTHESIS . $@19 expr RIGHT_PARENTHESIS

    $default  reduce using rule 105 ($@19)

    $@19  go to state 147


State 102

  107 whilestmt: whilestart whilecond . stmt

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    stmt        go to state 148
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 103

  112 forstmt: forprefix N . elist RIGHT_PARENTHESIS $@20 N stmt N

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 66 (elist)

    expr        go to state 64
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 149
    objectdef   go to state 35
    const       go to state 38


State 104

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
  100 ifprefix: IF LEFT_PARENTHESIS expr . RIGHT_PARENTHESIS

    AND                shift, and go to state 73
    OR                 shift, and go to state 74
    ADD                shift, and go to state 75
    MINUS              shift, and go to state 76
    MULTIPLICATION     shift, and go to state 77
    DIVISION           shift, and go to state 78
    MODULO             shift, and go to state 79
    EQUAL              shift, and go to state 80
    INEQUAL            shift, and go to state 81
    GREATER            shift, and go to state 82
    GREATER_EQUAL      shift, and go to state 83
    LESS               shift, and go to state 84
    LESS_EQUAL         shift, and go to state 85
    RIGHT_PARENTHESIS  shift, and go to state 150


State 105

  110 forprefix: FOR LEFT_PARENTHESIS elist . SEMICOLON M expr SEMICOLON

    SEMICOLON  shift, and go to state 151


State 106

   83 funcdef: FUNCTION $@10 IDENT . @11 LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS $@13 block

    $default  reduce using rule 80 (@11)

    @11  go to state 152


State 107

   87 funcdef: FUNCTION @14 LEFT_PARENTHESIS . $@15 idlist RIGHT_PARENTHESIS $@16 block

    $default  reduce using rule 85 ($@15)

    $@15  go to state 153


State 108

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
  114 returnstmt: RETURN $@21 expr . SEMICOLON

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85
    SEMICOLON       shift, and go to state 154


State 109

  116 returnstmt: RETURN $@22 SEMICOLON .

    $default  reduce using rule 116 (returnstmt)


State 110

    8 stmt: BREAK $@1 SEMICOLON .

    $default  reduce using rule 8 (stmt)


State 111

   10 stmt: CONTINUE $@2 SEMICOLON .

    $default  reduce using rule 10 (stmt)


State 112

   58 call: LEFT_PARENTHESIS funcdef . RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 155


State 113

   77 block: LEFT_CURLY_BRACKET $@9 stmt_list . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 156


State 114

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
   75 indexedelem: LEFT_CURLY_BRACKET expr . COLON $@8 expr RIGHT_CURLY_BRACKET

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85
    COLON           shift, and go to state 157


State 115

   67 elist_expressions: COMMA . expr elist_expressions

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 158
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 116

   65 elist: expr elist_expressions .

    $default  reduce using rule 65 (elist)


State 117

   69 objectdef: LEFT_SQUARE_BRACKET elist RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 69 (objectdef)


State 118

   70 objectdef: LEFT_SQUARE_BRACKET indexed RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 70 (objectdef)


State 119

   72 indexedelem_list: COMMA . indexedelem indexedelem_list

    LEFT_CURLY_BRACKET  shift, and go to state 63

    indexedelem  go to state 159


State 120

   71 indexed: indexedelem indexedelem_list .

    $default  reduce using rule 71 (indexed)


State 121

   32 term: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS .

    $default  reduce using rule 32 (term)


State 122

   46 primary: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS .
   58 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 160

    $default  reduce using rule 46 (primary)


State 123

   15 stmt_list: stmt $@3 stmt_list .

    $default  reduce using rule 15 (stmt_list)


State 124

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   29     | expr AND expr .
   30     | expr . OR expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85

    $default  reduce using rule 29 (expr)


State 125

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
   30     | expr OR expr .

    AND             shift, and go to state 73
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85

    $default  reduce using rule 30 (expr)


State 126

   18 expr: expr . ADD expr
   18     | expr ADD expr .
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr

    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    $default  reduce using rule 18 (expr)


State 127

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   19     | expr MINUS expr .
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr

    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    $default  reduce using rule 19 (expr)


State 128

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   20     | expr MULTIPLICATION expr .
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr

    $default  reduce using rule 20 (expr)


State 129

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   21     | expr DIVISION expr .
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr

    $default  reduce using rule 21 (expr)


State 130

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   22     | expr MODULO expr .
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr

    $default  reduce using rule 22 (expr)


State 131

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   27     | expr EQUAL expr .
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85

    EQUAL    error (nonassociative)
    INEQUAL  error (nonassociative)

    $default  reduce using rule 27 (expr)


State 132

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   28     | expr INEQUAL expr .
   29     | expr . AND expr
   30     | expr . OR expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85

    EQUAL    error (nonassociative)
    INEQUAL  error (nonassociative)

    $default  reduce using rule 28 (expr)


State 133

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   23     | expr GREATER expr .
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    GREATER        error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS           error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 23 (expr)


State 134

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   24     | expr GREATER_EQUAL expr .
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    GREATER        error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS           error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 24 (expr)


State 135

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   25     | expr LESS expr .
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    GREATER        error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS           error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 25 (expr)


State 136

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   26     | expr LESS_EQUAL expr .
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    GREATER        error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS           error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 26 (expr)


State 137

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
   53 member: lvalue LEFT_SQUARE_BRACKET expr . RIGHT_SQUARE_BRACKET

    AND                   shift, and go to state 73
    OR                    shift, and go to state 74
    ADD                   shift, and go to state 75
    MINUS                 shift, and go to state 76
    MULTIPLICATION        shift, and go to state 77
    DIVISION              shift, and go to state 78
    MODULO                shift, and go to state 79
    EQUAL                 shift, and go to state 80
    INEQUAL               shift, and go to state 81
    GREATER               shift, and go to state 82
    GREATER_EQUAL         shift, and go to state 83
    LESS                  shift, and go to state 84
    LESS_EQUAL            shift, and go to state 85
    RIGHT_SQUARE_BRACKET  shift, and go to state 161


State 138

   62 normcall: LEFT_PARENTHESIS $@6 . elist RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 66 (elist)

    expr        go to state 64
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 162
    objectdef   go to state 35
    const       go to state 38


State 139

   52 member: lvalue DOT IDENT .

    $default  reduce using rule 52 (member)


State 140

   64 methodcall: DOUBLE_DOT IDENT . LEFT_PARENTHESIS $@7 elist RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 163


State 141

   42 assignexpr: lvalue $@4 ASSIGN . $@5 expr

    $default  reduce using rule 41 ($@5)

    $@5  go to state 164


State 142

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
   55 member: call LEFT_SQUARE_BRACKET expr . RIGHT_SQUARE_BRACKET

    AND                   shift, and go to state 73
    OR                    shift, and go to state 74
    ADD                   shift, and go to state 75
    MINUS                 shift, and go to state 76
    MULTIPLICATION        shift, and go to state 77
    DIVISION              shift, and go to state 78
    MODULO                shift, and go to state 79
    EQUAL                 shift, and go to state 80
    INEQUAL               shift, and go to state 81
    GREATER               shift, and go to state 82
    GREATER_EQUAL         shift, and go to state 83
    LESS                  shift, and go to state 84
    LESS_EQUAL            shift, and go to state 85
    RIGHT_SQUARE_BRACKET  shift, and go to state 165


State 143

   56 call: call LEFT_PARENTHESIS elist . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 166


State 144

   54 member: call DOT IDENT .

    $default  reduce using rule 54 (member)


State 145

  101 elseprefix: ELSE .

    $default  reduce using rule 101 (elseprefix)


State 146

  103 ifstmt: ifprefix stmt elseprefix . stmt

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    stmt        go to state 167
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 147

  106 whilecond: LEFT_PARENTHESIS $@19 . expr RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 168
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 148

  107 whilestmt: whilestart whilecond stmt .

    $default  reduce using rule 107 (whilestmt)


State 149

  112 forstmt: forprefix N elist . RIGHT_PARENTHESIS $@20 N stmt N

    RIGHT_PARENTHESIS  shift, and go to state 169


State 150

  100 ifprefix: IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS .

    $default  reduce using rule 100 (ifprefix)


State 151

  110 forprefix: FOR LEFT_PARENTHESIS elist SEMICOLON . M expr SEMICOLON

    $default  reduce using rule 109 (M)

    M  go to state 170


State 152

   83 funcdef: FUNCTION $@10 IDENT @11 . LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS $@13 block

    LEFT_PARENTHESIS  shift, and go to state 171


State 153

   87 funcdef: FUNCTION @14 LEFT_PARENTHESIS $@15 . idlist RIGHT_PARENTHESIS $@16 block

    IDENT  shift, and go to state 172

    $default  reduce using rule 96 (idlist)

    idlist  go to state 173


State 154

  114 returnstmt: RETURN $@21 expr SEMICOLON .

    $default  reduce using rule 114 (returnstmt)


State 155

   58 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 160


State 156

   77 block: LEFT_CURLY_BRACKET $@9 stmt_list RIGHT_CURLY_BRACKET .

    $default  reduce using rule 77 (block)


State 157

   75 indexedelem: LEFT_CURLY_BRACKET expr COLON . $@8 expr RIGHT_CURLY_BRACKET

    $default  reduce using rule 74 ($@8)

    $@8  go to state 174


State 158

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
   67 elist_expressions: COMMA expr . elist_expressions

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85
    COMMA           shift, and go to state 115

    $default  reduce using rule 68 (elist_expressions)

    elist_expressions  go to state 175


State 159

   72 indexedelem_list: COMMA indexedelem . indexedelem_list

    COMMA  shift, and go to state 119

    $default  reduce using rule 73 (indexedelem_list)

    indexedelem_list  go to state 176


State 160

   58 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS . elist RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 66 (elist)

    expr        go to state 64
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 177
    objectdef   go to state 35
    const       go to state 38


State 161

   53 member: lvalue LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 53 (member)


State 162

   62 normcall: LEFT_PARENTHESIS $@6 elist . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 178


State 163

   64 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS . $@7 elist RIGHT_PARENTHESIS

    $default  reduce using rule 63 ($@7)

    $@7  go to state 179


State 164

   42 assignexpr: lvalue $@4 ASSIGN $@5 . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 180
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 165

   55 member: call LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 55 (member)


State 166

   56 call: call LEFT_PARENTHESIS elist RIGHT_PARENTHESIS .

    $default  reduce using rule 56 (call)


State 167

  103 ifstmt: ifprefix stmt elseprefix stmt .

    $default  reduce using rule 103 (ifstmt)


State 168

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
  106 whilecond: LEFT_PARENTHESIS $@19 expr . RIGHT_PARENTHESIS

    AND                shift, and go to state 73
    OR                 shift, and go to state 74
    ADD                shift, and go to state 75
    MINUS              shift, and go to state 76
    MULTIPLICATION     shift, and go to state 77
    DIVISION           shift, and go to state 78
    MODULO             shift, and go to state 79
    EQUAL              shift, and go to state 80
    INEQUAL            shift, and go to state 81
    GREATER            shift, and go to state 82
    GREATER_EQUAL      shift, and go to state 83
    LESS               shift, and go to state 84
    LESS_EQUAL         shift, and go to state 85
    RIGHT_PARENTHESIS  shift, and go to state 181


State 169

  112 forstmt: forprefix N elist RIGHT_PARENTHESIS . $@20 N stmt N

    $default  reduce using rule 111 ($@20)

    $@20  go to state 182


State 170

  110 forprefix: FOR LEFT_PARENTHESIS elist SEMICOLON M . expr SEMICOLON

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 183
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 171

   83 funcdef: FUNCTION $@10 IDENT @11 LEFT_PARENTHESIS . $@12 idlist RIGHT_PARENTHESIS $@13 block

    $default  reduce using rule 81 ($@12)

    $@12  go to state 184


State 172

   95 idlist: IDENT . $@17 idlist_list

    $default  reduce using rule 94 ($@17)

    $@17  go to state 185


State 173

   87 funcdef: FUNCTION @14 LEFT_PARENTHESIS $@15 idlist . RIGHT_PARENTHESIS $@16 block

    RIGHT_PARENTHESIS  shift, and go to state 186


State 174

   75 indexedelem: LEFT_CURLY_BRACKET expr COLON $@8 . expr RIGHT_CURLY_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 187
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 175

   67 elist_expressions: COMMA expr elist_expressions .

    $default  reduce using rule 67 (elist_expressions)


State 176

   72 indexedelem_list: COMMA indexedelem indexedelem_list .

    $default  reduce using rule 72 (indexedelem_list)


State 177

   58 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 188


State 178

   62 normcall: LEFT_PARENTHESIS $@6 elist RIGHT_PARENTHESIS .

    $default  reduce using rule 62 (normcall)


State 179

   64 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS $@7 . elist RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 66 (elist)

    expr        go to state 64
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 189
    objectdef   go to state 35
    const       go to state 38


State 180

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
   42 assignexpr: lvalue $@4 ASSIGN $@5 expr .

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85

    $default  reduce using rule 42 (assignexpr)


State 181

  106 whilecond: LEFT_PARENTHESIS $@19 expr RIGHT_PARENTHESIS .

    $default  reduce using rule 106 (whilecond)


State 182

  112 forstmt: forprefix N elist RIGHT_PARENTHESIS $@20 . N stmt N

    $default  reduce using rule 108 (N)

    N  go to state 190


State 183

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
  110 forprefix: FOR LEFT_PARENTHESIS elist SEMICOLON M expr . SEMICOLON

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85
    SEMICOLON       shift, and go to state 191


State 184

   83 funcdef: FUNCTION $@10 IDENT @11 LEFT_PARENTHESIS $@12 . idlist RIGHT_PARENTHESIS $@13 block

    IDENT  shift, and go to state 172

    $default  reduce using rule 96 (idlist)

    idlist  go to state 192


State 185

   95 idlist: IDENT $@17 . idlist_list

    COMMA  shift, and go to state 193

    $default  reduce using rule 99 (idlist_list)

    idlist_list  go to state 194


State 186

   87 funcdef: FUNCTION @14 LEFT_PARENTHESIS $@15 idlist RIGHT_PARENTHESIS . $@16 block

    $default  reduce using rule 86 ($@16)

    $@16  go to state 195


State 187

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . GREATER expr
   24     | expr . GREATER_EQUAL expr
   25     | expr . LESS expr
   26     | expr . LESS_EQUAL expr
   27     | expr . EQUAL expr
   28     | expr . INEQUAL expr
   29     | expr . AND expr
   30     | expr . OR expr
   75 indexedelem: LEFT_CURLY_BRACKET expr COLON $@8 expr . RIGHT_CURLY_BRACKET

    AND                  shift, and go to state 73
    OR                   shift, and go to state 74
    ADD                  shift, and go to state 75
    MINUS                shift, and go to state 76
    MULTIPLICATION       shift, and go to state 77
    DIVISION             shift, and go to state 78
    MODULO               shift, and go to state 79
    EQUAL                shift, and go to state 80
    INEQUAL              shift, and go to state 81
    GREATER              shift, and go to state 82
    GREATER_EQUAL        shift, and go to state 83
    LESS                 shift, and go to state 84
    LESS_EQUAL           shift, and go to state 85
    RIGHT_CURLY_BRACKET  shift, and go to state 196


State 188

   58 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS .

    $default  reduce using rule 58 (call)


State 189

   64 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS $@7 elist . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 197


State 190

  112 forstmt: forprefix N elist RIGHT_PARENTHESIS $@20 N . stmt N

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    stmt        go to state 198
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 191

  110 forprefix: FOR LEFT_PARENTHESIS elist SEMICOLON M expr SEMICOLON .

    $default  reduce using rule 110 (forprefix)


State 192

   83 funcdef: FUNCTION $@10 IDENT @11 LEFT_PARENTHESIS $@12 idlist . RIGHT_PARENTHESIS $@13 block

    RIGHT_PARENTHESIS  shift, and go to state 199


State 193

   98 idlist_list: COMMA . IDENT $@18 idlist_list

    IDENT  shift, and go to state 200


State 194

   95 idlist: IDENT $@17 idlist_list .

    $default  reduce using rule 95 (idlist)


State 195

   87 funcdef: FUNCTION @14 LEFT_PARENTHESIS $@15 idlist RIGHT_PARENTHESIS $@16 . block

    LEFT_CURLY_BRACKET  shift, and go to state 16

    block  go to state 201


State 196

   75 indexedelem: LEFT_CURLY_BRACKET expr COLON $@8 expr RIGHT_CURLY_BRACKET .

    $default  reduce using rule 75 (indexedelem)


State 197

   64 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS $@7 elist RIGHT_PARENTHESIS .

    $default  reduce using rule 64 (methodcall)


State 198

  112 forstmt: forprefix N elist RIGHT_PARENTHESIS $@20 N stmt . N

    $default  reduce using rule 108 (N)

    N  go to state 202


State 199

   83 funcdef: FUNCTION $@10 IDENT @11 LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS . $@13 block

    $default  reduce using rule 82 ($@13)

    $@13  go to state 203


State 200

   98 idlist_list: COMMA IDENT . $@18 idlist_list

    $default  reduce using rule 97 ($@18)

    $@18  go to state 204


State 201

   87 funcdef: FUNCTION @14 LEFT_PARENTHESIS $@15 idlist RIGHT_PARENTHESIS $@16 block .

    $default  reduce using rule 87 (funcdef)


State 202

  112 forstmt: forprefix N elist RIGHT_PARENTHESIS $@20 N stmt N .

    $default  reduce using rule 112 (forstmt)


State 203

   83 funcdef: FUNCTION $@10 IDENT @11 LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS $@13 . block

    LEFT_CURLY_BRACKET  shift, and go to state 16

    block  go to state 205


State 204

   98 idlist_list: COMMA IDENT $@18 . idlist_list

    COMMA  shift, and go to state 193

    $default  reduce using rule 99 (idlist_list)

    idlist_list  go to state 206


State 205

   83 funcdef: FUNCTION $@10 IDENT @11 LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS $@13 block .

    $default  reduce using rule 83 (funcdef)


State 206

   98 idlist_list: COMMA IDENT $@18 idlist_list .

    $default  reduce using rule 98 (idlist_list)
